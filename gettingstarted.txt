Как начать делать задачу?

1. Создайте папку с задачей. Имя этой папки будет использоваться как имя задачи. В дальнейшем обозначается $(problem).
2. Создайте папку solutions. Положите в нее решения по задаче. Решение должно называться $(problem)_suffix.language.
3. В корне задачи создайте файл "makefile". В нем нужно указать суффикс главного решения (строкой
mainSuffix := suffix) а так же включить makefile.main (строкой include %path%/makefile.main).
Решения должны работать через stdin/stdout при определенной константе NOFILES. Либо их следует указать в
переменной FileIOSol.
4. Cоздайте папку src. Положите в нее необходимые вам генераторы. Генераторы должны выводить один тест в stdout.
   В качестве генератора распознаются следующие файлы : gen* Gen* twf.c. Дополнительные генераторы
   можно укзать в makefile строкой (AdditionalStdoutGens := %имена генераторов%)
   Генераторы, создающие файл с тестов, а не выводящие его в stdout необходимо прописать в makefile 
   строкой (FileGens := %имена генераторов%).
   Генераторы, создающие несколько файлов с тестами, необходимо прописать в makefile строкой
   (MultiGens := %имена генераторов%).
5. Добавьте чекер с именем check.cpp или check.java в корень задачи или в папку src.
   Во втором случае, если testlib4j не лежит в папке src в makefile надо добавить строку
   (Testlib4jPath := %путь к testlib4j%).
6. Добавьте валидатор с именем validate.cpp или validate.java в корень задачи или в папку src.
7. Создайте файл genlines.sh, который выведет строки генерации тестов в stdout.



Основные полезные команды.

1. make all - собирает все тесты и ответы к ним.
2. make reload - пересобирает внутринние файлы. Поможет, если только что добавилось решение, или происходит что-то странное.
3. make clean - удаляет все сгенерированные файлы кроме внутринних конфигурирующих файлов.
4. make forceclean - удаляет все сгенерированные файлы.
5. make %test% - собрать один тест
6. make %test%.a - собрать один тест и ответ к нему.
7. make check_%solution% - прогнать решение на всех тестах
8. make check_%solution%@%test% - прогнать решение на тесте.
9. make info - показать информацию о тестах
10. make info%test% - показать информацию о тесте.

Важные моменты:
1. Ни у каких двух сущностей не должно совпадать имя без расширения.
Именем решения является суффикс, именем всего остального является имя файла без расширения.
Например не должно быть решений problem_check.cpp (имя конфликтует с чекером)
problem_aa.cpp и problem_aa.java (конфликтуют между собой за имя aa)
problem_genrand.cpp и генератора genrand.java (конфликтуют между собой за имя genrand)
2. Не следует редактировать руками генерируемые файлы, такие как
.tests, .config, содержимое папок .__temp__, .bin а также тесты и ответы к ним.
Ваши изменения могут быть затерты, или наоборот привести к некорректной генерации других файлов.
3. Имена решений, тестов, генераторов, папок, содержащие пробелы могут привести к странным последствиям,
поэтому их лучше избегать.